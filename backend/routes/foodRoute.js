import express from "express";
import {addFood, removeFood, listFood} from "../controllers/FoodController.js" ;
import multer from "multer" ;
export const foodRouter = express.Router() ;

//IMAGE STORAGE FUNCTIONIn summary, this code sets up 
// Multer middleware to handle file uploads in your Express application. When a POST request is made to the "/api/food/add" 
// endpoint with a file attached to the "image" field, Multer will save the uploaded file to the "uploads" directory 
// using the specified filename format, and then pass control to the addFood handler function for further processing.

const storage = multer.diskStorage({
    destination:"uploads" ,
    filename:(req , file , cb) => {
        return cb(null , `${Date.now()}${file.originalname}`)
    }
})

const upload = multer({storage:storage});

foodRouter.post("/add" , upload.single("image") ,addFood);

foodRouter.get("/list" , listFood);

foodRouter.post("/remove" ,removeFood );









// multer.diskStorage(): This is a function provided by the Multer library that allows you to set and modify the storage settings for uploaded files.
// destination: "uploads": This property specifies the directory where the uploaded files will be saved. In this case, it's a directory named "uploads"
//  relative to the current working directory of your application.
// filename: (req, file, cb) => { ... }: This property expects a function that will be called for
//  each uploaded file. The function takes three arguments:

// req: The Express.js request object, which contains information about the incoming HTTP request.
// file: An object containing information about the uploaded file, such as its original name and size.
// cb: A callback function that you must call with an error (if any) as the first argument and
//  the desired filename as the second argument.



// Inside the filename function:

// return cb(null, ${Date.now()}${file.originalname}): This line calls the cb callback 
// function with two arguments:

// null: This represents no error. If there's an error, you would pass an error object instead of null.
// ${Date.now()}${file.originalname}: This is a template literal that generates a string
//  by concatenating the current timestamp (Date.now()) and the original filename of the uploaded 
//  (file.originalname). This approach ensures that each uploaded file will have a unique name, 
// preventing naming conflicts.



// The resulting storage object is typically passed as a configuration option 
// when initializing the Multer middleware in your Express.js application.
// In summary, this code sets up the storage configuration for Multer,
//  specifying that uploaded files should be saved in the "uploads" directory, and that their filenames should be generated by combining the current timestamp and the original filename to ensure uniqueness.


// upload.single("image") is a Multer middleware function that handles file uploads for 
// a single file field named "image". It expects the form data to contain a file field with the name "image".


// multer is a function that creates middleware for handling file uploads in Express.js applications. This function accepts an object as an argument, which allows you to configure how the file uploads should be handled.
// In the line:
// javascriptCopy codeconst upload = multer({storage: storage});
// The part {storage: storage} is an object literal that is being passed as the argument to the multer function.
// This object has a single property called storage, and the value assigned to this property is another variable called storage.
// The storage variable holds a configuration object that was created earlier using multer.diskStorage(). 


// WHY THERE IS A NEED TO WRITE THIS LINE ----->  const upload = multer({ storage: storage }); 

//Apologies for the confusion. You're absolutely right, we cannot directly use storage.single('file') or storage.uploadSingle('file') because
//  the storage object doesn't have these methods defined.
// The storage object is created using multer.diskStorage() and only contains
//  configuration details for file storage, such as the destination folder and filename generation logic. 
// It doesn't have any methods to handle the file upload process itself.
// The single() or uploadSingle() methods are provided by the Multer instance, 
// which is created by calling multer({ storage: storage }).
// The multer function takes an object as an argument, where we pass the storage configuration we defined. 
// This creates an instance of the Multer middleware that we can use in our routes for handling file uploads.


// HOW TO USE MULTER IN GENERAL -----> 
// This code sets up the storage configuration for Multer.
//  multer.diskStorage is a function that tells Multer to store the uploaded files on disk. It takes an object as an argument with two properties:
// destination: This is a function that determines the directory where the uploaded files should be stored. 
// In this case, it's set to 'uploads/', which means the files will be stored in a directory named uploads relative
//  to the current working directory. The cb argument is a callback function that Multer expects to be called
//  with an error (if any) and the directory path.
// filename: This is a function that determines the name of the uploaded file. In this case, 
// it uses Date.now() to generate a unique timestamp 
// and appends the original file extension (path.extname(file.originalname)) to it. This ensures that the uploaded 
// file has a unique name, preventing conflicts with existing files. 
// The cb argument is a callback function that Multer expects to be called with an error (if any) and
//  the generated filename.
// Both destination and filename functions receive req (the current HTTP request object) and file (the file being uploaded) as arguments, 
// allowing you to customize the storage logic based on the request or file properties if needed.
// 
// 
// 